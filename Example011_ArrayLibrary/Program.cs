void FillArray(int[] collection)                               // По умолчанию массив будет заполнен нулями (0), но используя метод (void) мы заполним его случайными числами
                                                               // Дальше дадим наименование нашему методу (FillArray). В качестве аргумента здесь будет приниматься коллекция (int  collection)
{
    int length = collection.Length;                             // Дальше нам нужно получить длину нашего массива, делается это при помощи collection.Length
    int index = 0;                                             // На следующем этапе нам нужно взять например позицию index  и по умолчанию она будет равняться нулю
    while (index < length)                                     // Теперь в цикле while пропишем что пока index меньше length то будем "что-то" делать
    {
            collection [index] = new Random().Next(1, 10);     // И следующее наше действие это обратиться к аргументу collection на позицию index, и положить туда случайное новое целое число из диапазона 1 10  
            // index = index + 1                               // В качестве этого "чего-то" будет index присвоить index + 1
            index++;
    }


}// int [] array = new int [10];   }                                // Начнем с того что мы определим новый массив (название array), укажем что в этом массиве будет по умолчанию 10 элементов
                                                                   //Запоминаем новую конструкцию new int [10] который дословно означает - создай новый массив, в котором будет 10 элементов
// Первый метод у нас готов, пока тестировать не будем. 
 
void PrintArray(int [] col)                  // Теперь сделаем метод void который будет печатать массив, аналогичным образом в качестве аргумента здесь будет приходить массив
                                            // Обратите внимание мы здесь специально не будем давать одинаковые имена (вместо collection будет col) просто чтобы появилась привычка различные аргументы называть различными именами  
{
     int count = col.Length;                // Количество элементов здесь мы будем обозначать вот таким вот образом
     int position = 0;                      // Далее текущую позицию обозначим не через index, а через position
     while (position < count)               // Дальше возьмем новый цикл while и скажем пока positon < count мы будем выводить в консоль значение текущего элемента т.е col [position]
     {
        Console.WriteLine(col[position]);
        position++;                         // Далее увеличиваем значение текущей позиции
     }   
}                                           // Что такое ключевое слово void и для чего оно нужно? Дело в том что есть методы в контексте языка C# которые могут возвращать какие-то значения, а какие-то не могут возвращать эти самые значения. Если у нас метод ничего не возвращает, вот он называется void методом (т.е в коде мы не должны будем использовать оператор return).  

// int [] array = new int [10]; - коментим чтоб работал код

// Теперь попробуем протестировать наш метод.

// FillArray(array);  - коментим чтоб работал код  // Тестировать мы будем следующим образом: мы напишем FillArray и в качестве аргумента передадим наименование нашего массива (array)               
// PrintArray(array);                              // Затем вызовем следующий метод (PrintArray) который распечатает наш массив      
                                                   // ... запускаем dotnet run   



// Что мы в итоге здесь сделали? Сначала мы определили массив из 10 элементов 
// ---int [] array = new int [10]; дальше мы вызвали метод ---FillArray(array); который заполнил нам массив, и дальше 
// отдельный метод PrintArray(array); распечатал массив. 


// Теперь попробуем адаптировать решение предыдущей задачи, в которой мы находили позицию нужного элемента в массиве (Example010) с использованием метода.


int IndexOf(int[] collection, int find)     // Для этого нам потребуется описать теперь метод отличный от void (в данном случае он будет возвращать позицию т.е index) метод int
                                            // Дальше назовем этот метод IndexOf в качестве аргумента будет приходить массив collection и какой-то элемент find
{
    int count = collection.Length;          // Дальше мы определяем количество элементов count используя collection.Length
    int index = 0;                          // Дальше нам потребуются индексы чтобы щелкать массивы (пусть это будет переменная index)
    int position = 0;                       // ...для того чтобы ее (позицию) куда-то сохранить (определим для этого новую переменную position) значение по умолчанию будет 0
    while (index < count)                   // Далее мы возьмем цикл while который будет проверять если (index < count) то сразу же будем щелкать index++
     {
         if (collection[index] == find)     // И здесь напишем следующее: если (collection[index] == find) (== совпал) то в этом случае нужно будет куда-то сохранить позицию
         {
             position = index;              // в position мы должны будем положить значение нашего индекса
             break;                         // мы получили последнее вхождение (т.е последнее одинаковое значение), для того чтобы получить первое вхождение используем break
         }
        index++;
     }
     return position;                       // После того как цикл отработает мы ожидаем в return нашу позицию элемента
}

int [] array = new int [10];

FillArray(array);
array [4] = 4;                               // Искусственно, принудительно добавим пару четверок.                               
array [6] = 4;                                      
PrintArray(array);                                
Console.WriteLine();                         // Выведем пустую строчку, для того чтобы быть уверенным в том что не является частью вывода массива                       

int pos = IndexOf(array, 4);                     // Дальше определим переменную pos и в нее положим результат работы метода IndexOf, в качестве аргумента будет передаваться наш массив.
                                              // И для примера будем искать 4
Console.WriteLine(pos);                       // После того как метод отработает мы покажем на экране pos
                                               // ... запускаем dotner run  

                                              // Если мы попробуем искать элемент которого точно не существует (н-р 444) int pos = IndexOf(array, 444); и мы попробуем запустить код, окажется что позиция будет 0
                                            

                                            // В этой лекции мы с вами познакомились с массивами и
                                            //немножечко с методами. 
                                            //Посмотрели как описываются массивы для этого есть разные способы в языке C#
                                            //Посмотрели то как описываются методы, попробовали написать свои собственные методы,  использовали методы
                                            //которые работают с массивами которые заполняют массивы тут мы подключили с вами за не предыдущей лекции.
                                            // Мы использовали уже вовсю циклы, мы уже вовсю использовали генератор псевдослучайных чисел так что теперь продолжаем только практиковаться больше
                                            //решаем задачи так что до встречи друзья мои на семинарских занятиях она этом пока пока.